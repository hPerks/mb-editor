new SimGroup(MissionGroup) {


new ScriptObject(MissionInfo) {
name = "Example Mission";
game = "PQ";
author = "hPerks";
type = "Custom";
level = "1";
desc = "Showcasing some of the features in my text-based MB level maker.";
startHelpText = "";
gameMode = "Normal";
parTime = "0";
platinumTime = "25000";
ultimateTime = "18000";
awesomeTime = "15500";
music = "Good To Jump To.ogg";
};

new Sky() {
position = "336 136 0";
rotation = "1.0 0.0 0.0 0";
scale = "1 1 1";
visibleDistance = "500";
useSkyTextures = "1";
renderBottomTexture = "1";
skySolidColor = "0.6 0.6 0.6 1";
materialList = "~/data/skies_pq/blender1.dml";
windVelocity = "1 0 0";
windEffectPrecipitation = "0";
noRenderBans = "1";
};

new Sun() {
direction = "0.5 0.5 -0.5";
color = "1.4 1.2 0.4 1";
ambient = "0.3 0.3 0.4 1";
};

new StaticShape(StartPoint) {
position = "0 0 0";
rotation = "1.0 0.0 0.0 0";
scale = "1 1 1";
datablock = "StartPad";
};

new InteriorInstance() {
position = "0.0 0.0 0.0";
rotation = "1.0 0.0 0.0 0";
scale = "1 1 1";
interiorFile = "~/data/interiors_pq/exampleMission.dif";
};

new Item() {
position = "0.0 3.0 0.0";
rotation = "1.0 0.0 0.0 0";
scale = "1 1 1";
collideable = "0";
static = "1";
rotate = "1";
datablock = "SuperJumpItem_PQ";
};

new Trigger() {
position = "-4.5 -4.5 0.0";
rotation = "1.0 0.0 0.0 0";
scale = "8.5 8.5 4.0";
polyhedron = "0 0 0 1 0 0 0 1 0 0 0 1";
triggerOnce = "0";
datablock = "HelpTrigger";
text = "Items are placed with a single tiny line of code, and customized however much you want.";
};

new Item() {
position = "-4.0 16.0 6.5";
rotation = "1.0 0.0 0.0 0";
scale = "1 1 1";
collideable = "0";
static = "1";
rotate = "1";
datablock = "TimeTravelItem_PQ";
timeBonus = "2000";
};

new Item() {
position = "11.0 12.0 7.0";
rotation = "0.0 -1.0 0.0 90.0";
scale = "1 1 1";
collideable = "0";
static = "1";
rotate = "1";
datablock = "AntiGravityItem_PQ";
};

new Item() {
position = "13.0 12.0 19.0";
rotation = "0.0 -1.0 0.0 179.99999999999997";
scale = "1 1 1";
collideable = "0";
static = "1";
rotate = "1";
datablock = "AntiGravityItem_PQ";
};

new Trigger() {
position = "10.0 8.0 6.0";
rotation = "1.0 0.0 0.0 0";
scale = "2.0 8.5 4.0";
polyhedron = "0 0 0 1 0 0 0 1 0 0 0 1";
triggerOnce = "0";
datablock = "HelpTrigger";
text = "There are many tools for handling lists of numbers like positions and rotations. You can even (finally) combine rotations with a simple * sign!";
};

new StaticShape() {
position = "21.0 -3.0 18.0";
rotation = "1.0 0.0 0.0 0";
scale = "1.5 1.5 1.5";
datablock = "RoundBumper_PQ";
};

new StaticShape() {
position = "25.0 -3.0 18.0";
rotation = "1.0 0.0 0.0 0";
scale = "1.5 1.5 1.5";
datablock = "RoundBumper_PQ";
};

new StaticShape() {
position = "23.0 -1.0 18.0";
rotation = "1.0 0.0 0.0 0";
scale = "1.5 1.5 1.5";
datablock = "RoundBumper_PQ";
};

new StaticShape() {
position = "27.0 -1.0 18.0";
rotation = "1.0 0.0 0.0 0";
scale = "1.5 1.5 1.5";
datablock = "RoundBumper_PQ";
};

new StaticShape() {
position = "21.0 1.0 18.0";
rotation = "1.0 0.0 0.0 0";
scale = "1.5 1.5 1.5";
datablock = "RoundBumper_PQ";
};

new StaticShape() {
position = "25.0 1.0 18.0";
rotation = "1.0 0.0 0.0 0";
scale = "1.5 1.5 1.5";
datablock = "RoundBumper_PQ";
};

new StaticShape() {
position = "23.0 3.0 18.0";
rotation = "1.0 0.0 0.0 0";
scale = "1.5 1.5 1.5";
datablock = "RoundBumper_PQ";
};

new StaticShape() {
position = "27.0 3.0 18.0";
rotation = "1.0 0.0 0.0 0";
scale = "1.5 1.5 1.5";
datablock = "RoundBumper_PQ";
};

new Trigger() {
position = "20.0 -8.0 18.0";
rotation = "1.0 0.0 0.0 0";
scale = "8.5 16.0 4.0";
polyhedron = "0 0 0 1 0 0 0 1 0 0 0 1";
triggerOnce = "0";
datablock = "HelpTrigger";
text = "Placing multiple similar items is made super easy with functions like copies(), as well as the builtlin loops and list comprehensions in Python.";
};

new SimGroup() {


new PathedInterior() {
position = "0 0 0";
rotation = "1.0 0.0 0.0 0";
scale = "1 1 1";
datablock = "PathedDefault";
interiorResource = "platinum/data/interiors_pq/exampleMission.dif";
interiorIndex = "0";
initialTargetPosition = "-1";
basePosition = "0 0 0";
baseRotation = "1.0 0.0 0.0 0";
baseScale = "1 1 1";
};

new Path() {


new Marker() {
position = "0.0 0.0 0.0";
rotation = "1.0 0.0 0.0 0";
scale = "1 1 1";
seqNum = "0";
msToNext = "3500";
smoothingType = "Accelerate";
};

new Marker() {
position = "0.0 0.0 12.0";
rotation = "1.0 0.0 0.0 0";
scale = "1 1 1";
seqNum = "1";
msToNext = "1500";
smoothingType = "Accelerate";
};

new Marker() {
position = "0.0 0.0 0.0";
rotation = "1.0 0.0 0.0 0";
scale = "1 1 1";
seqNum = "2";
msToNext = "0";
smoothingType = "Accelerate";
};
};
};

new Trigger() {
position = "12.0 -16.5 18.0";
rotation = "1.0 0.0 0.0 0";
scale = "8.0 8.5 12.0";
polyhedron = "0 0 0 1 0 0 0 1 0 0 0 1";
triggerOnce = "0";
datablock = "HelpTrigger";
text = "There are quite a few convenient ways to build moving platforms. This one uses the MovingInterior.make() and Path.make_accelerate() builders.";
};

new SimGroup() {


new StaticShape() {
position = "-3 -7 30";
rotation = "1.0 0.0 0.0 0";
scale = "1 1 1";
datablock = "TrapDoor_PQ";
};

new StaticShape() {
position = "-1 -7 30";
rotation = "1.0 0.0 0.0 0";
scale = "1 1 1";
datablock = "TrapDoor_PQ";
};

new StaticShape() {
position = "1 -7 30";
rotation = "1.0 0.0 0.0 0";
scale = "1 1 1";
datablock = "TrapDoor_PQ";
};

new StaticShape() {
position = "3 -7 30";
rotation = "1.0 0.0 0.0 0";
scale = "1 1 1";
datablock = "TrapDoor_PQ";
};
};

new SimGroup() {


new StaticShape() {
position = "-3 -5 30";
rotation = "1.0 0.0 0.0 0";
scale = "1 1 1";
datablock = "TrapDoor_PQ";
};

new StaticShape() {
position = "-1 -5 30";
rotation = "1.0 0.0 0.0 0";
scale = "1 1 1";
datablock = "TrapDoor_PQ";
};

new StaticShape() {
position = "1 -5 30";
rotation = "1.0 0.0 0.0 0";
scale = "1 1 1";
datablock = "TrapDoor_PQ";
};

new StaticShape() {
position = "3 -5 30";
rotation = "1.0 0.0 0.0 0";
scale = "1 1 1";
datablock = "TrapDoor_PQ";
};
};

new SimGroup() {


new StaticShape() {
position = "-3 -3 30";
rotation = "1.0 0.0 0.0 0";
scale = "1 1 1";
datablock = "TrapDoor_PQ";
};

new StaticShape() {
position = "-1 -3 30";
rotation = "1.0 0.0 0.0 0";
scale = "1 1 1";
datablock = "TrapDoor_PQ";
};

new StaticShape() {
position = "1 -3 30";
rotation = "1.0 0.0 0.0 0";
scale = "1 1 1";
datablock = "TrapDoor_PQ";
};

new StaticShape() {
position = "3 -3 30";
rotation = "1.0 0.0 0.0 0";
scale = "1 1 1";
datablock = "TrapDoor_PQ";
};
};

new SimGroup() {


new StaticShape() {
position = "-3 -1 30";
rotation = "1.0 0.0 0.0 0";
scale = "1 1 1";
datablock = "TrapDoor_PQ";
};

new StaticShape() {
position = "-1 -1 30";
rotation = "1.0 0.0 0.0 0";
scale = "1 1 1";
datablock = "TrapDoor_PQ";
};

new StaticShape() {
position = "1 -1 30";
rotation = "1.0 0.0 0.0 0";
scale = "1 1 1";
datablock = "TrapDoor_PQ";
};

new StaticShape() {
position = "3 -1 30";
rotation = "1.0 0.0 0.0 0";
scale = "1 1 1";
datablock = "TrapDoor_PQ";
};
};

new SimGroup() {


new StaticShape() {
position = "-3 1 30";
rotation = "1.0 0.0 0.0 0";
scale = "1 1 1";
datablock = "TrapDoor_PQ";
};

new StaticShape() {
position = "-1 1 30";
rotation = "1.0 0.0 0.0 0";
scale = "1 1 1";
datablock = "TrapDoor_PQ";
};

new StaticShape() {
position = "1 1 30";
rotation = "1.0 0.0 0.0 0";
scale = "1 1 1";
datablock = "TrapDoor_PQ";
};

new StaticShape() {
position = "3 1 30";
rotation = "1.0 0.0 0.0 0";
scale = "1 1 1";
datablock = "TrapDoor_PQ";
};
};

new SimGroup() {


new StaticShape() {
position = "-3 3 30";
rotation = "1.0 0.0 0.0 0";
scale = "1 1 1";
datablock = "TrapDoor_PQ";
};

new StaticShape() {
position = "-1 3 30";
rotation = "1.0 0.0 0.0 0";
scale = "1 1 1";
datablock = "TrapDoor_PQ";
};

new StaticShape() {
position = "1 3 30";
rotation = "1.0 0.0 0.0 0";
scale = "1 1 1";
datablock = "TrapDoor_PQ";
};

new StaticShape() {
position = "3 3 30";
rotation = "1.0 0.0 0.0 0";
scale = "1 1 1";
datablock = "TrapDoor_PQ";
};
};

new SimGroup() {


new StaticShape() {
position = "-3 5 30";
rotation = "1.0 0.0 0.0 0";
scale = "1 1 1";
datablock = "TrapDoor_PQ";
};

new StaticShape() {
position = "-1 5 30";
rotation = "1.0 0.0 0.0 0";
scale = "1 1 1";
datablock = "TrapDoor_PQ";
};

new StaticShape() {
position = "1 5 30";
rotation = "1.0 0.0 0.0 0";
scale = "1 1 1";
datablock = "TrapDoor_PQ";
};

new StaticShape() {
position = "3 5 30";
rotation = "1.0 0.0 0.0 0";
scale = "1 1 1";
datablock = "TrapDoor_PQ";
};
};

new SimGroup() {


new StaticShape() {
position = "-3 7 30";
rotation = "1.0 0.0 0.0 0";
scale = "1 1 1";
datablock = "TrapDoor_PQ";
};

new StaticShape() {
position = "-1 7 30";
rotation = "1.0 0.0 0.0 0";
scale = "1 1 1";
datablock = "TrapDoor_PQ";
};

new StaticShape() {
position = "1 7 30";
rotation = "1.0 0.0 0.0 0";
scale = "1 1 1";
datablock = "TrapDoor_PQ";
};

new StaticShape() {
position = "3 7 30";
rotation = "1.0 0.0 0.0 0";
scale = "1 1 1";
datablock = "TrapDoor_PQ";
};
};

new Trigger() {
position = "-4.5 -8.0 30.0";
rotation = "1.0 0.0 0.0 0";
scale = "8.5 16.0 4.0";
polyhedron = "0 0 0 1 0 0 0 1 0 0 0 1";
triggerOnce = "0";
datablock = "HelpTrigger";
text = "These trapdoors would take ages to make and tweak using either the LE or a normal text editor. Here it's done in one (cramped) line of code, using SimGroups, copies(), and Python's range().";
};

new Trigger() {
position = "0 0 0";
rotation = "1.0 0.0 0.0 0";
scale = "1 1 1";
polyhedron = "4.0 8.0 30.0 16.0 0.0 6.0 0.0 8.0 0.0 0.0 0.0 4.0";
triggerOnce = "0";
datablock = "HelpTrigger";
text = "This help trigger is skewed so as to align with the ramp. You can't activate it from below!";
};

new Trigger() {
position = "22.5 4.5 36.0";
rotation = "1.0 0.0 0.0 0";
scale = "3.0 3.0 2.0";
polyhedron = "0 0 0 1 0 0 0 1 0 0 0 1";
triggerOnce = "0";
datablock = "TeleportTrigger";
destination = "destination";
delay = "2000";
silent = "0";
};

new Trigger(destination) {
position = "24.0 0.0 48.0";
rotation = "1.0 0.0 0.0 0";
scale = "1 1 1";
polyhedron = "0 0 0 1 0 0 0 1 0 0 0 1";
triggerOnce = "0";
datablock = "DestinationTrigger";
};

new TSStatic() {
position = "24.0 6.0 36.0";
rotation = "1.0 0.0 0.0 0";
scale = "0.25 0.25 0.25";
shapeName = "~/data/shapes/teleportpad.dts";
};

new Trigger() {
position = "20.0 4.0 36.0";
rotation = "1.0 0.0 0.0 0";
scale = "8.5 12.5 4.0";
polyhedron = "0 0 0 1 0 0 0 1 0 0 0 1";
triggerOnce = "0";
datablock = "HelpTrigger";
text = "Friends and the ObjectName type facilitate linking objects, like teleports and destinations. Additional methods such as TeleportTrigger.with_destination() make this even simpler.";
};

new Item() {
position = "24.0 -6.0 40.0";
rotation = "1.0 0.0 0.0 0";
scale = "1 1 1";
collideable = "0";
static = "1";
rotate = "1";
datablock = "NestEgg_PQ";
};

new Trigger() {
position = "22.5 -13.5 40.0";
rotation = "1.0 0.0 0.0 0";
scale = "3.0 3.0 2.0";
polyhedron = "0 0 0 1 0 0 0 1 0 0 0 1";
triggerOnce = "0";
datablock = "TeleportTrigger";
destination = "destination";
delay = "2000";
silent = "0";
};

new TSStatic() {
position = "24.0 -12.0 40.0";
rotation = "1.0 0.0 0.0 0";
scale = "0.25 0.25 0.25";
shapeName = "~/data/shapes/teleportpad.dts";
};

new StaticShape() {
position = "12.0 0.0 48.0";
rotation = "0.0 0.0 -1.0 90.0";
scale = "1 1 1";
datablock = "EndPad";
};

new StaticShape() {
position = "12.0 0.0 52.0";
rotation = "1.0 0.0 0.0 0";
scale = "1 1 1";
datablock = "RegularFinishLineSign";
};

new Trigger() {
position = "4.0 -8.0 48.0";
rotation = "1.0 0.0 0.0 0";
scale = "24.0 16.0 4.0";
polyhedron = "0 0 0 1 0 0 0 1 0 0 0 1";
triggerOnce = "0";
datablock = "HelpTrigger";
text = "Finally, the autobounds() function adds a bounds trigger to your level automatically. Trying to save your level without a bounds trigger throws an error!";
};

new Trigger(Bounds) {
position = "-24.5 -36.5 -20";
rotation = "1.0 0.0 0.0 0";
scale = "71.5 72.5 172.0";
polyhedron = "0 0 0 1 0 0 0 1 0 0 0 1";
triggerOnce = "0";
datablock = "InBoundsTrigger";
};
};